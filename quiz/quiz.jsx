import React, { useState, useEffect, useMemo } from 'react';

// Dados do Quiz
const fullQuizData = {
  questions: [
    { "question": "Você precisa começar a trabalhar em uma nova funcionalidade, mas não quer afetar a versão principal do código. Qual é a abordagem recomendada usando Git?", "hint": "Pense em como o Git permite que várias linhas de desenvolvimento existam simultaneamente.", "answerOptions": [ { "text": "Fazer commit de todas as alterações diretamente na branch `main` e depois revertê-las se algo der errado.", "rationale": "Fazer commits diretamente na branch principal é arriscado, pois pode introduzir instabilidade no código base de produção.", "isCorrect": false }, { "text": "Criar uma nova branch a partir da `main`, trabalhar nela e depois mesclá-la de volta através de um Pull Request.", "rationale": "Isso isola o desenvolvimento da nova funcionalidade, permitindo trabalho seguro e revisão de código antes da integração.", "isCorrect": true }, { "text": "Clonar o repositório em uma nova pasta local e trabalhar lá.", "rationale": "Embora isso isole o trabalho, dificulta a integração futura das suas alterações de volta ao repositório original.", "isCorrect": false }, { "text": "Usar o comando `git stash` para salvar as alterações e aplicá-las mais tarde na `main`.", "rationale": "`git stash` é útil para salvar alterações temporariamente, mas não para gerenciar um fluxo de trabalho de funcionalidade inteira.", "isCorrect": false } ] },
    { "question": "Por que é uma prática de segurança fundamental armazenar uma chave de API secreta em uma variável de ambiente em vez de escrevê-la no código-fonte?", "hint": "Considere o que acontece quando você envia seu código para um repositório público no GitHub.", "answerOptions": [ { "text": "Para que a chave de API seja carregada mais rapidamente pela aplicação.", "rationale": "A forma como a chave é armazenada não tem impacto significativo na velocidade de carregamento.", "isCorrect": false }, { "text": "Para evitar que informações sensíveis sejam expostas publicamente no controle de versão.", "rationale": "O arquivo `.env` é incluído no `.gitignore`, garantindo que segredos não sejam versionados e compartilhados acidentalmente.", "isCorrect": true }, { "text": "Porque variáveis de ambiente são mais fáceis de lembrar do que chaves de API longas.", "rationale": "O objetivo principal não é a memorização, mas a segurança e a separação de configurações do código.", "isCorrect": false }, { "text": "Para permitir que o JavaScript modifique a chave de API durante a execução.", "rationale": "Chaves de API são credenciais estáticas e não devem ser modificadas pela aplicação em tempo de execução.", "isCorrect": false } ] },
    { "question": "Qual é a principal vantagem de usar a sintaxe `async/await` em JavaScript ao lidar com operações assíncronas?", "hint": "Compare o estilo de código `async/await` com o uso de `then()` encadeados.", "answerOptions": [ { "text": "Torna o código assíncrono mais parecido com código síncrono, melhorando a legibilidade.", "rationale": "A sintaxe `async/await` permite escrever operações assíncronas em um estilo linear, tornando a lógica mais fácil de seguir.", "isCorrect": true }, { "text": "Executa as chamadas de API de forma significativamente mais rápida.", "rationale": "A velocidade da chamada de API depende da rede; `async/await` é uma melhoria sintática, não de performance.", "isCorrect": false }, { "text": "Elimina a necessidade de tratar erros em chamadas de API.", "rationale": "Erros ainda precisam ser tratados, geralmente com blocos `try...catch`, que funcionam bem com `async/await`.", "isCorrect": false }, { "text": "É a única maneira de fazer chamadas de API em Node.js.", "rationale": "Existem outras maneiras de lidar com código assíncrono, como callbacks e Promises com `.then()`.", "isCorrect": false } ] },
    { "question": "No ciclo do Desenvolvimento Orientado a Testes (TDD), qual é o primeiro passo ao adicionar uma nova funcionalidade?", "hint": "O nome da metodologia dá uma pista sobre o que vem primeiro.", "answerOptions": [ { "text": "Escrever o código da funcionalidade o mais rápido possível.", "rationale": "No TDD, a escrita do código de produção ocorre somente após a criação de um teste que falha.", "isCorrect": false }, { "text": "Refatorar o código existente para prepará-lo para a nova funcionalidade.", "rationale": "A refatoração é o terceiro passo do ciclo (Red-Green-Refactor), realizado após o teste passar.", "isCorrect": false }, { "text": "Escrever um teste automatizado que falha porque a funcionalidade ainda não existe.", "rationale": "Este é o passo 'Red' do ciclo TDD. Ele define os requisitos da nova funcionalidade e falha inicialmente.", "isCorrect": true }, { "text": "Fazer o deploy da aplicação em um ambiente de homologação.", "rationale": "O deploy ocorre muito mais tarde no processo de desenvolvimento, após a funcionalidade estar completa e testada.", "isCorrect": false } ] },
    { "question": "Qual código de status HTTP seria a resposta mais apropriada para um endpoint `DELETE /users/123` bem-sucedido?", "hint": "Pense nos códigos de status que indicam sucesso. Qual deles especificamente significa 'sucesso, mas nada a mostrar'?", "answerOptions": [ { "text": "200 OK", "rationale": "200 OK é um código de sucesso genérico, mas outro código é mais específico para esta situação sem corpo de resposta.", "isCorrect": false }, { "text": "201 CREATED", "rationale": "Este código indica que um novo recurso foi criado, o que não é o caso de uma operação de exclusão.", "isCorrect": false }, { "text": "204 No Content", "rationale": "Este código indica que o servidor processou a requisição com sucesso, mas não há conteúdo para retornar, ideal para uma operação `DELETE`.", "isCorrect": true }, { "text": "404 Not Found", "rationale": "Este código indica que o recurso solicitado não pôde ser encontrado, representando uma falha na operação.", "isCorrect": false } ] },
    { "question": "Por que o uso de queries parametrizadas é crucial para prevenir ataques de Injeção de SQL?", "hint": "Como o banco de dados trata os dados do usuário quando eles são enviados separadamente do comando SQL?", "answerOptions": [ { "text": "Elas tornam as queries SQL mais rápiddas ao fazer cache.", "rationale": "Embora possam oferecer um benefício de performance, o principal motivo para seu uso em segurança é outro.", "isCorrect": false }, { "text": "Elas garantem que a entrada do usuário seja tratada como dados, e não como parte do comando SQL a ser executado.", "rationale": "O banco de dados compila o comando SQL primeiro e depois insere os parâmetros, impedindo que a entrada do usuário altere a lógica da query.", "isCorrect": true }, { "text": "Elas criptografam automaticamente os dados antes de enviá-los ao banco.", "rationale": "Queries parametrizadas não criptografam dados; elas se concentram em separar o código da query dos dados.", "isCorrect": false }, { "text": "Elas validam o formato dos dados do usuário, como verificar se um e-mail é válido.", "rationale": "A validação de formato deve ser feita na lógica da aplicação, antes de a query ser enviada ao banco.", "isCorrect": false } ] },
    { "question": "Qual é a principal finalidade de usar o Docker para empacotar uma aplicação?", "hint": "Pense no clássico problema 'mas funciona na minha máquina'.", "answerOptions": [ { "text": "Aumentar a velocidade da conexão de internet do servidor.", "rationale": "O Docker não tem relação com a performance da rede; seu foco está no ambiente da aplicação.", "isCorrect": false }, { "text": "Garantir que a aplicação rode de forma consistente em diferentes ambientes.", "rationale": "O contêiner agrupa a aplicação com tudo o que ela precisa para rodar, eliminando inconsistências entre ambientes.", "isCorrect": true }, { "text": "Substituir completamente a necessidade de um sistema operacional no servidor.", "rationale": "Contêineres rodam sobre o kernel do sistema operacional do host, eles não o substituem.", "isCorrect": false }, { "text": "Escrever código de backend e frontend na mesma linguagem.", "rationale": "O Docker é agnóstico em relação às linguagens de programação usadas; ele lida com o ambiente de execução.", "isCorrect": false } ] },
    { "question": "Dentro de um pipeline de CI/CD, qual é o papel fundamental da Integração Contínua (CI)?", "hint": "O que acontece toda vez que um desenvolvedor envia código novo para o repositório?", "answerOptions": [ { "text": "Fazer o deploy automático da aplicação diretamente em produção.", "rationale": "O deploy em produção é parte da Entrega Contínua (CD), não da Integração Contínua (CI).", "isCorrect": false }, { "text": "Automatizar a criação de novas funcionalidades com base nas issues.", "rationale": "A criação de funcionalidades ainda é um processo manual realizado por desenvolvedores.", "isCorrect": false }, { "text": "Mesclar, construir e testar automaticamente o código de múltiplos desenvolvedores.", "rationale": "A CI foca em verificar a cada alteração que o novo código se integra corretamente, rodando builds e testes para detectar problemas cedo.", "isCorrect": true }, { "text": "Provisionar a infraestrutura de nuvem, como servidores e bancos de dados.", "rationale": "O provisionamento de infraestrutura é geralmente tratado por ferramentas de IaC, não sendo o foco central da CI.", "isCorrect": false } ] },
    { "question": "Por que usar `bcrypt` é mais seguro para senhas do que um algoritmo de hashing rápido como SHA-256?", "hint": "Pense em um atacante que obteve seu banco de dados e está tentando adivinhar as senhas.", "answerOptions": [ { "text": "Porque `bcrypt` gera hashes mais curtos, que são mais fáceis de armazenar.", "rationale": "O comprimento do hash não é o principal fator de segurança; hashes do `bcrypt` são geralmente mais longos.", "isCorrect": false }, { "text": "Porque sua lentidão intencional torna ataques de força bruta muito mais caros e demorados.", "rationale": "O 'fator de custo' do `bcrypt` torna o processo computacionalmente intensivo, frustrando tentativas de adivinhar senhas em massa.", "isCorrect": true }, { "text": "Porque o SHA-256 não consegue processar caracteres especiais.", "rationale": "Tanto o `bcrypt` quanto o SHA-256 podem processar qualquer tipo de caractere como entrada.", "isCorrect": false }, { "text": "Porque `bcrypt` é um algoritmo de criptografia reversível.", "rationale": "Ambos são algoritmos de hashing, que são, por design, de mão única (irreversíveis).", "isCorrect": false } ] },
    { "question": "Qual a principal função de um quadro Kanban no gerenciamento de projetos?", "hint": "Como um quadro com colunas como 'A Fazer', 'Em Progresso' e 'Concluído' ajuda uma equipe?", "answerOptions": [ { "text": "Garantir que todos os desenvolvedores trabalhem no mesmo número de horas.", "rationale": "O Kanban foca no fluxo de trabalho e na entrega de valor, não no rastreamento de horas.", "isCorrect": false }, { "text": "Substituir a necessidade de comunicação verbal entre a equipe.", "rationale": "O quadro é uma ferramenta de comunicação, mas ele complementa, e não substitui, a colaboração direta.", "isCorrect": false }, { "text": "Fornecer uma representação visual do fluxo de trabalho para identificar gargalos.", "rationale": "O Kanban permite que todos vejam o status do trabalho, limitem o trabalho em andamento (WIP) e melhorem o fluxo.", "isCorrect": true }, { "text": "Automatizar a escrita de código para as tarefas listadas nos cartões.", "rationale": "O quadro gerencia o trabalho, mas a execução das tarefas ainda é uma atividade humana.", "isCorrect": false } ] },
    { "question": "Qual a diferença fundamental entre `git fetch` e `git pull`?", "hint": "Um comando apenas busca as novidades do repositório remoto, enquanto o outro também tenta integrá-las.", "answerOptions": [ { "text": "`git fetch` baixa as alterações e as mescla automaticamente, enquanto `git pull` apenas baixa.", "rationale": "Esta descrição inverte as funções dos dois comandos.", "isCorrect": false }, { "text": "`git fetch` baixa as alterações do remoto mas não as integra na sua branch local, enquanto `git pull` baixa e tenta mesclá-las.", "rationale": "`git pull` é essencialmente um `git fetch` seguido de um `git merge`.", "isCorrect": true }, { "text": "Não há diferença, `git pull` é apenas um apelido para `git fetch`.", "rationale": "Eles são dois comandos distintos com propósitos diferentes, embora relacionados.", "isCorrect": false }, { "text": "`git fetch` só funciona com a branch `main`, enquanto `git pull` funciona com qualquer branch.", "rationale": "Ambos os comandos podem operar em qualquer branch configurada para rastrear uma branch remota.", "isCorrect": false } ] },
    { "question": "O que o seletor de descendentes (ex: `div p`) faz em CSS?", "hint": "Pense na hierarquia dos elementos no HTML.", "answerOptions": [ { "text": "Seleciona todos os elementos `<p>` que são filhos diretos de um `<div>`.", "rationale": "Isso descreve o seletor de filho (`>`), não o seletor de descendente.", "isCorrect": false }, { "text": "Seleciona todos os elementos `<div>` que contêm pelo menos um `<p>`.", "rationale": "O seletor estiliza o elemento mais interno (`p`), não o contêiner (`div`).", "isCorrect": false }, { "text": "Seleciona todos os elementos `<p>` que estão dentro de um `<div>`, não importando o nível de aninhamento.", "rationale": "Ele aplica o estilo a qualquer `p` que seja descendente de um `div`, seja filho, neto, etc.", "isCorrect": true }, { "text": "Seleciona o primeiro elemento `<p>` encontrado logo após um `<div>`.", "rationale": "Isso descreve o seletor de irmão adjacente (`+`).", "isCorrect": false } ] },
    { "question": "Em JavaScript, qual a principal diferença no tratamento do `this` entre uma arrow function e uma function declaration normal?", "hint": "Uma delas 'herda' o contexto de onde foi criada, enquanto a outra tem seu próprio contexto definido na chamada.", "answerOptions": [ { "text": "Não há diferença, o `this` se comporta da mesma forma em ambas.", "rationale": "Existe uma diferença fundamental que é uma das principais razões para usar arrow functions.", "isCorrect": false }, { "text": "Arrow functions não podem acessar o `this`.", "rationale": "Elas podem acessar o `this`, mas o fazem de uma maneira diferente das funções normais.", "isCorrect": false }, { "text": "Arrow functions herdam o `this` do escopo em que foram criadas, enquanto functions normais têm seu próprio `this`.", "rationale": "Isso é conhecido como 'this lexical' e evita a necessidade de `var self = this` ou `.bind(this)`.", "isCorrect": true }, { "text": "Functions normais herdam o `this` do escopo, enquanto arrow functions têm seu próprio `this`.", "rationale": "Esta afirmação inverte o comportamento real de ambas as declarações de função.", "isCorrect": false } ] },
    { "question": "Qual é um dos principais benefícios de usar um framework como Next.js para uma aplicação React?", "hint": "Pense em como o conteúdo da página é entregue ao navegador e como isso afeta SEO e performance inicial.", "answerOptions": [ { "text": "Ele elimina completamente a necessidade de escrever CSS.", "rationale": "Next.js oferece várias opções de estilização, mas não elimina a necessidade de CSS.", "isCorrect": false }, { "text": "Ele permite renderização no lado do servidor (SSR) e geração de site estático (SSG) prontas para uso.", "rationale": "Essas funcionalidades melhoram o tempo de carregamento inicial e a otimização para motores de busca (SEO).", "isCorrect": true }, { "text": "Ele só permite o desenvolvimento de aplicações para desktop.", "rationale": "Next.js é um framework para desenvolvimento de aplicações web.", "isCorrect": false }, { "text": "Ele compila o código React para uma linguagem de backend como Java ou Python.", "rationale": "Next.js usa Node.js no backend para permitir suas funcionalidades, mas o código do frontend continua sendo JavaScript/React.", "isCorrect": false } ] },
    { "question": "No contexto de APIs REST, o que significa 'Idempotência'?", "hint": "O que acontece se você enviar a mesma requisição várias vezes para o servidor?", "answerOptions": [ { "text": "Que a requisição é executada mais rapidamente a cada vez que é chamada.", "rationale": "Idempotência se refere à consistência do resultado, não à performance.", "isCorrect": false }, { "text": "Que a requisição só pode ser feita uma única vez com sucesso.", "rationale": "Isso descreveria uma operação não repetível, o oposto de idempotente.", "isCorrect": false }, { "text": "Que fazer a mesma requisição múltiplas vezes produz o mesmo resultado que fazê-la uma única vez.", "rationale": "Por exemplo, um `PUT` para atualizar um recurso com os mesmos dados terá o mesmo efeito final, não importa quantas vezes seja chamado.", "isCorrect": true }, { "text": "Que a requisição não requer autenticação para ser executada.", "rationale": "Idempotência é um conceito sobre o efeito da operação, não sobre seus requisitos de segurança.", "isCorrect": false } ] },
    { "question": "Qual é a principal função de um ORM (Object-Relational Mapping) como o Prisma ou TypeORM?", "hint": "Pense em como um desenvolvedor interage com o banco de dados sem escrever SQL diretamente.", "answerOptions": [ { "text": "Otimizar a interface do usuário da aplicação.", "rationale": "ORMs operam na camada de dados (backend), não na camada de visualização (frontend).", "isCorrect": false }, { "text": "Permitir que os desenvolvedores interajam com o banco de dados usando objetos e métodos da sua linguagem de programação.", "rationale": "Ele mapeia as tabelas do banco de dados para classes/objetos, abstraindo a necessidade de escrever queries SQL manualmente.", "isCorrect": true }, { "text": "Substituir o banco de dados relacional por um banco de dados de objetos.", "rationale": "Um ORM trabalha em conjunto com um banco de dados relacional, não o substitui.", "isCorrect": false }, { "text": "Automatizar o processo de CI/CD.", "rationale": "Ferramentas como GitHub Actions ou Jenkins são usadas para CI/CD, não ORMs.", "isCorrect": false } ] },
    { "question": "O que é o problema de 'N+1 queries' em aplicações que usam um ORM?", "hint": "O que pode acontecer quando você busca uma lista de itens e, em seguida, busca os dados relacionados para cada um desses itens dentro de um loop?", "answerOptions": [ { "text": "Uma query que é executada N vezes mais rápido que o normal.", "rationale": "O problema de N+1 está relacionado à ineficiência e a um número excessivo de queries, não a uma melhoria de performance.", "isCorrect": false }, { "text": "Um padrão onde uma query inicial busca uma lista de N itens, e depois N queries adicionais são executadas para buscar dados relacionados para cada item.", "rationale": "Isso leva a um total de N+1 queries, causando uma sobrecarga significativa no banco de dados. A solução é usar 'eager loading' (carregamento ansioso).", "isCorrect": true }, { "text": "A necessidade de adicionar 1 query extra a cada N commits no repositório.", "rationale": "Este problema está relacionado à performance do banco de dados na execução da aplicação, não ao fluxo de trabalho do Git.", "isCorrect": false }, { "text": "Uma query que retorna N+1 resultados quando apenas N eram esperados.", "rationale": "O problema não é sobre o número de resultados, mas sobre o número de idas ao banco de dados para obtê-los.", "isCorrect": false } ] },
    { "question": "Qual a diferença fundamental entre Autenticação e Autorização?", "hint": "Pense nas duas perguntas: 'Quem é você?' e 'O que você tem permissão para fazer?'.", "answerOptions": [ { "text": "Autenticação verifica quem você é, enquanto Autorização verifica o que você pode fazer.", "rationale": "Autenticação confirma a identidade do usuário (login e senha), enquanto Autorização define suas permissões de acesso após a autenticação.", "isCorrect": true }, { "text": "Autorização vem antes da Autenticação no processo de login.", "rationale": "Um usuário deve primeiro ser autenticado (provar sua identidade) antes que suas permissões possam ser verificadas.", "isCorrect": false }, { "text": "São termos diferentes para o mesmo processo de verificação de segurança.", "rationale": "Embora relacionados, eles representam duas etapas distintas e cruciais na segurança de um sistema.", "isCorrect": false }, { "text": "Autenticação é feita no frontend e Autorização é feita no backend.", "rationale": "Ambos os processos são gerenciados e validados de forma segura no backend.", "isCorrect": false } ] },
    { "question": "O que é a 'Infraestrutura como Código' (IaC)?", "hint": "Pense em gerenciar servidores e bancos de dados usando arquivos de configuração versionáveis, assim como você faz com o código da aplicação.", "answerOptions": [ { "text": "Uma técnica para escrever o código da aplicação usando apenas linguagens de infraestrutura.", "rationale": "IaC não se refere à linguagem da aplicação, mas à linguagem usada para definir a infraestrutura.", "isCorrect": false }, { "text": "O processo de gerenciar e provisionar infraestrutura de TI através de arquivos de definição legíveis por máquina.", "rationale": "Isso permite automatizar, versionar e replicar a infraestrutura de forma confiável, usando ferramentas como Terraform ou CloudFormation.", "isCorrect": true }, { "text": "Um tipo de firmware instalado diretamente no hardware do servidor.", "rationale": "IaC é uma camada de software e configuração, não um firmware de hardware.", "isCorrect": false }, { "text": "Uma metodologia ágil para equipes de infraestrutura.", "rationale": "Embora IaC se alinhe bem com práticas ágeis e DevOps, ela é uma técnica de automação, não uma metodologia de gerenciamento.", "isCorrect": false } ] },
    { "question": "Qual é a principal diferença entre um contêiner Docker e uma imagem Docker?", "hint": "Pense na analogia com classes e objetos na programação orientada a objetos.", "answerOptions": [ { "text": "A imagem é uma instância em execução, enquanto o contêiner é um modelo.", "rationale": "Esta afirmação inverte a relação entre os dois conceitos.", "isCorrect": false }, { "text": "A imagem é um modelo (template) somente leitura, enquanto o contêiner é uma instância executável da imagem.", "rationale": "Assim como um objeto é uma instância de uma classe, um contêiner é uma instância em execução de uma imagem.", "isCorrect": true }, { "text": "Imagens são usadas para desenvolvimento e contêineres são usados para produção.", "rationale": "Ambos são usados em todos os ambientes; a imagem é o pacote e o contêiner é a execução desse pacote.", "isCorrect": false }, { "text": "Não há diferença, são apenas nomes diferentes para a mesma coisa.", "rationale": "São conceitos distintos e fundamentais para o funcionamento do Docker.", "isCorrect": false } ] },
    { "question": "Qual o propósito principal do protocolo TCP no modelo de rede?", "hint": "Pense em por que ele é usado para coisas como carregar uma página da web ou enviar um e-mail, em vez de uma transmissão de vídeo ao vivo.", "answerOptions": [ { "text": "Garantir a entrega mais rápida possível dos pacotes, mesmo que alguns se percam.", "rationale": "Essa é uma característica do protocolo UDP, não do TCP.", "isCorrect": false }, { "text": "Estabelecer uma conexão confiável e garantir que todos os pacotes de dados sejam entregues na ordem correta.", "rationale": "O TCP usa um handshake de três vias e confirmações para garantir a integridade e a ordem dos dados.", "isCorrect": true }, { "text": "Apenas atribuir um endereço IP a cada dispositivo na rede.", "rationale": "Essa é a função do Protocolo de Internet (IP), no qual o TCP opera.", "isCorrect": false }, { "text": "Definir o formato das requisições e respostas entre um cliente e um servidor web.", "rationale": "Essa é a função do protocolo HTTP, que por sua vez utiliza o TCP para transporte.", "isCorrect": false } ] },
    { "question": "O que significa dizer que o protocolo HTTP é 'stateless' (sem estado)?", "hint": "Cada requisição que você faz para um servidor é tratada como um evento isolado.", "answerOptions": [ { "text": "Que o servidor não armazena nenhuma informação sobre as requisições anteriores de um cliente.", "rationale": "Cada requisição HTTP é independente e o servidor não mantém um histórico de interações. Técnicas como cookies foram criadas para contornar isso.", "isCorrect": true }, { "text": "Que o protocolo não pode ser usado em aplicações que precisam de login.", "rationale": "Aplicações com estado são construídas sobre o HTTP usando mecanismos como sessões e tokens para manter o estado.", "isCorrect": false }, { "text": "Que o servidor e o cliente mantêm uma conexão constante e ativa.", "rationale": "Isso descreveria um protocolo 'stateful'. O HTTP abre e fecha conexões para cada requisição (com algumas otimizações).", "isCorrect": false }, { "text": "Que o protocolo não pode transferir arquivos, apenas texto.", "rationale": "HTTP é capaz de transferir vários tipos de dados, incluindo imagens, vídeos e outros arquivos, através do uso de MIME types.", "isCorrect": false } ] },
    { "question": "Em gerenciamento de projetos ágil, qual o propósito de limitar o 'Work in Progress' (WIP) em um quadro Kanban?", "hint": "Pense no que acontece quando uma equipe tenta fazer muitas coisas ao mesmo tempo.", "answerOptions": [ { "text": "Garantir que todos os membros da equipe estejam sempre ocupados com múltiplas tarefas.", "rationale": "Limitar o WIP tem o objetivo oposto: focar em menos tarefas para terminá-las mais rápido.", "isCorrect": false }, { "text": "Incentivar a multitarefa para aumentar a produtividade geral.", "rationale": "A multitarefa geralmente leva a trocas de contexto e perda de eficiência. Limitar o WIP promove o foco.", "isCorrect": false }, { "text": "Melhorar o fluxo, reduzir o tempo de entrega de cada tarefa e expor gargalos no processo.", "rationale": "Ao limitar o número de tarefas 'em andamento', a equipe é forçada a colaborar para finalizar o trabalho antes de começar algo novo.", "isCorrect": true }, { "text": "Aumentar o número de reuniões de status para acompanhar todas as tarefas.", "rationale": "Um quadro Kanban bem gerenciado deve, na verdade, reduzir a necessidade de reuniões de status, pois o progresso é visual.", "isCorrect": false } ] },
    { "question": "Qual é a função do arquivo `package-lock.json` em um projeto Node.js?", "hint": "Ele garante que todos os desenvolvedores na equipe e o servidor de produção usem exatamente as mesmas versões das dependências.", "answerOptions": [ { "text": "É um arquivo de backup para o `package.json`.", "rationale": "Não é um backup, mas um arquivo gerado que trabalha em conjunto com o `package.json`.", "isCorrect": false }, { "text": "Ele descreve as dependências do projeto de forma semântica, como `^1.2.3`.", "rationale": "Essa descrição se aplica ao `package.json`. O `package-lock.json` é mais específico.", "isCorrect": false }, { "text": "Ele registra as versões exatas de todas as dependências instaladas, garantindo builds consistentes.", "rationale": "Isso resolve o problema de 'funciona na minha máquina', pois garante que a mesma árvore de dependências seja instalada em qualquer lugar.", "isCorrect": true }, { "text": "Ele contém o código-fonte das dependências para uso offline.", "rationale": "O código das dependências fica na pasta `node_modules`, não no arquivo de lock.", "isCorrect": false } ] },
    { "question": "O que a propriedade `position: relative;` faz em um elemento CSS?", "hint": "Pense em como ela afeta o posicionamento de seus próprios filhos que usam `position: absolute`.", "answerOptions": [ { "text": "Remove o elemento do fluxo normal do documento e o posiciona em relação à janela do navegador.", "rationale": "Isso descreve o comportamento de `position: fixed`.", "isCorrect": false }, { "text": "Torna o elemento um ponto de referência para o posicionamento de seus filhos com `position: absolute`.", "rationale": "Um filho com `position: absolute` será posicionado em relação ao ancestral posicionado mais próximo, que frequentemente é um pai com `position: relative`.", "isCorrect": true }, { "text": "Posiciona o elemento em relação à sua posição original, mas sem afetar o layout de outros elementos.", "rationale": "Embora o elemento possa ser deslocado com `top`/`left`, sua principal função em layouts modernos é servir como âncora para filhos absolutos.", "isCorrect": false }, { "text": "Centraliza o elemento na tela, tanto horizontal quanto verticalmente.", "rationale": "A centralização geralmente é feita com outras técnicas, como Flexbox ou Grid, não com `position: relative`.", "isCorrect": false } ] },
    { "question": "Qual é a finalidade de uma 'licença de software' como a MIT ou a GPL?", "hint": "Ela define as regras sobre como outras pessoas podem interagir com seu código.", "answerOptions": [ { "text": "É um certificado que prova que o software não contém bugs.", "rationale": "Nenhuma licença pode garantir a ausência de bugs; elas tratam de permissões legais.", "isCorrect": false }, { "text": "É um documento legal que define como o software pode ser usado, modificado e distribuído por outros.", "rationale": "Licenças como a MIT são permissivas, enquanto outras como a GPL têm requisitos mais rigorosos sobre o compartilhamento de modificações.", "isCorrect": true }, { "text": "É um script que automatiza a instalação do software.", "rationale": "Isso seria um instalador ou um script de build, não uma licença.", "isCorrect": false }, { "text": "É a documentação técnica que explica como o código funciona.", "rationale": "A documentação técnica é separada da licença legal.", "isCorrect": false } ] },
    { "question": "Em React, por que é importante usar uma `key` única ao renderizar uma lista de elementos?", "hint": "Como o React sabe qual item da lista foi alterado, adicionado ou removido de forma eficiente?", "answerOptions": [ { "text": "Para aplicar um estilo CSS único a cada item da lista.", "rationale": "O estilo pode ser aplicado com classes ou outros métodos, a `key` não é para isso.", "isCorrect": false }, { "text": "Para ajudar o React a identificar quais itens foram alterados, adicionados ou removidos, otimizando a atualização da UI.", "rationale": "As `key`s dão aos elementos uma identidade estável, permitindo que o algoritmo de reconciliação do React atue de forma muito mais eficiente.", "isCorrect": true }, { "text": "Para servir como o `id` do HTML para cada elemento da lista.", "rationale": "A `key` é um atributo interno do React e não é renderizada no DOM como um `id`.", "isCorrect": false }, { "text": "Para garantir que os itens da lista sejam renderizados em ordem alfabética.", "rationale": "A ordem de renderização é determinada pela ordem dos itens no array, não pelas `key`s.", "isCorrect": false } ] },
    { "question": "Qual a finalidade do arquivo `.gitignore` em um repositório Git?", "hint": "Pense em arquivos que não devem ser compartilhados com outros desenvolvedores, como segredos ou dependências.", "answerOptions": [ { "text": "Para listar todos os arquivos importantes que devem ser incluídos em cada commit.", "rationale": "O `.gitignore` tem a função oposta: especificar o que deve ser ignorado.", "isCorrect": false }, { "text": "Para especificar arquivos e pastas que o Git deve ignorar e não rastrear.", "rationale": "Isso é usado para evitar que arquivos gerados, dependências (`node_modules`) e segredos (`.env`) sejam adicionados ao repositório.", "isCorrect": true }, { "text": "É um arquivo de log que registra todas as ações do Git no repositório.", "rationale": "O log de ações é visualizado com o comando `git log`, não através deste arquivo.", "isCorrect": false }, { "text": "Para definir permissões de usuário sobre quem pode acessar o repositório.", "rationale": "As permissões são gerenciadas na plataforma de hospedagem (como GitHub ou GitLab), não através de um arquivo no repositório.", "isCorrect": false } ] },
    { "question": "O que é 'Continuous Deployment' (CD) e como ele difere de 'Continuous Delivery'?", "hint": "Ambos automatizam o processo de lançamento, mas um deles dá o passo final de ir para produção sem intervenção manual.", "answerOptions": [ { "text": "Não há diferença, são termos intercambiáveis.", "rationale": "Embora relacionados, eles representam diferentes níveis de automação no processo de lançamento.", "isCorrect": false }, { "text": "Continuous Deployment significa que cada alteração que passa nos testes é automaticamente lançada em produção.", "rationale": "Continuous Delivery deixa o passo final de deploy para produção como uma decisão manual, enquanto Continuous Deployment o automatiza completamente.", "isCorrect": true }, { "text": "Continuous Deployment foca apenas em testar o código, enquanto Delivery foca no lançamento.", "rationale": "Ambos envolvem testes rigorosos; a diferença está na automação do passo final de deploy.", "isCorrect": false }, { "text": "Continuous Delivery é um processo totalmente manual, enquanto Deployment é automatizado.", "rationale": "Ambos os conceitos envolvem um alto grau de automação; a diferença é sutil e está no último passo.", "isCorrect": false } ] },
    { "question": "O que é uma 'Pull Request' (ou 'Merge Request') em plataformas como GitHub e GitLab?", "hint": "É o principal mecanismo para propor e discutir alterações antes de integrá-las à branch principal.", "answerOptions": [ { "text": "Um comando Git para forçar o envio de suas alterações para o repositório remoto.", "rationale": "Isso seria mais próximo de `git push --force`, que é uma ação diferente e potencialmente destrutiva.", "isCorrect": false }, { "text": "Uma forma de propor que suas alterações de uma branch sejam mescladas em outra, permitindo revisão de código.", "rationale": "É um ponto central para colaboração, onde a equipe pode discutir, solicitar mudanças e aprovar o código antes da integração.", "isCorrect": true }, { "text": "Um pedido para que alguém 'puxe' seu código do repositório remoto para a máquina local.", "rationale": "Isso descreve a ação de `git pull`, que é uma operação individual, não um mecanismo de revisão em equipe.", "isCorrect": false }, { "text": "Um relatório automático de todos os bugs encontrados em uma branch.", "rationale": "Embora a discussão sobre bugs possa ocorrer em uma Pull Request, sua função principal é propor a mesclagem de código.", "isCorrect": false } ] },
    { "question": "O que é o conceito de 'state' em uma aplicação React?", "hint": "Pense em um dado que, quando alterado, deve fazer com que a interface do usuário seja atualizada automaticamente.", "answerOptions": [ { "text": "O CSS que define a aparência dos componentes.", "rationale": "O 'state' está relacionado aos dados e à lógica, não ao estilo visual.", "isCorrect": false }, { "text": "Um objeto de dados que pertence a um componente e que, quando alterado, faz com que o componente seja renderizado novamente.", "rationale": "O 'state' permite que os componentes sejam dinâmicos e interativos, refletindo mudanças nos dados.", "isCorrect": true }, { "text": "A lista de todas as props que um componente pode receber.", "rationale": "Props são dados passados de um componente pai para um filho, enquanto o 'state' é gerenciado internamente pelo próprio componente.", "isCorrect": false }, { "text": "O estado da conexão da aplicação com a internet.", "rationale": "Embora o estado da conexão possa ser parte do 'state' geral da aplicação, o conceito de 'state' em React é mais amplo e fundamental.", "isCorrect": false } ] },
    { "question": "Qual é a função do comando `npm install --save-dev`?", "hint": "Pense em ferramentas que são necessárias apenas durante o desenvolvimento, mas não na aplicação final em produção.", "answerOptions": [ { "text": "Instala uma dependência globalmente na máquina.", "rationale": "A instalação global é feita com a flag `-g`, não com `--save-dev`.", "isCorrect": false }, { "text": "Instala uma dependência e a adiciona à seção `devDependencies` do `package.json`.", "rationale": "Isso é usado para pacotes como linters, frameworks de teste e bundlers, que não são necessários para a aplicação rodar em produção.", "isCorrect": true }, { "text": "Salva uma cópia da dependência em um local seguro para backup.", "rationale": "O comando gerencia as dependências do projeto, não backups.", "isCorrect": false }, { "text": "Instala a versão de desenvolvimento mais recente (beta) de um pacote.", "rationale": "Ele instala a versão especificada ou a mais recente estável e a salva como uma dependência de desenvolvimento.", "isCorrect": false } ] },
    { "question": "O que é 'Server-Side Rendering' (SSR)?", "hint": "Onde a página HTML é montada antes de ser enviada para o navegador do usuário?", "answerOptions": [ { "text": "O processo de renderizar a página inteiramente no navegador do cliente usando JavaScript.", "rationale": "Isso descreve o 'Client-Side Rendering' (CSR), comum em aplicações de página única (SPAs) tradicionais.", "isCorrect": false }, { "text": "O processo de renderizar a página HTML inicial no servidor e enviar o HTML completo para o cliente.", "rationale": "Isso resulta em um carregamento inicial mais rápido e melhor SEO, pois o conteúdo já está presente no HTML inicial.", "isCorrect": true }, { "text": "Uma técnica para renderizar a aplicação em múltiplos servidores para redundância.", "rationale": "A redundância é um conceito de infraestrutura, enquanto SSR é uma estratégia de renderização de conteúdo.", "isCorrect": false }, { "text": "Renderizar a página apenas se o usuário estiver usando um navegador do lado do servidor.", "rationale": "SSR é uma técnica do servidor para beneficiar os navegadores do lado do cliente.", "isCorrect": false } ] },
    { "question": "Qual é o propósito principal de um registro DNS do tipo 'CNAME'?", "hint": "Pense nele como um apelido ou um atalho para outro nome de domínio.", "answerOptions": [ { "text": "Apontar um nome de domínio diretamente para um endereço IP.", "rationale": "Essa é a função de um registro do tipo 'A' (para IPv4) ou 'AAAA' (para IPv6).", "isCorrect": false }, { "text": "Apontar um nome de domínio (um alias) para outro nome de domínio (o canônico).", "rationale": "É útil quando um serviço (como Vercel ou Heroku) fornece um domínio de destino e você quer usar seu próprio domínio personalizado.", "isCorrect": true }, { "text": "Definir os servidores de e-mail para um domínio.", "rationale": "Essa é a função de um registro do tipo 'MX' (Mail Exchange).", "isCorrect": false }, { "text": "Armazenar informações de texto arbitrárias associadas a um domínio.", "rationale": "Essa é a função de um registro do tipo 'TXT', usado para verificação e outras finalidades.", "isCorrect": false } ] },
    { "question": "No contexto do protocolo HTTP, o que são 'cookies'?", "hint": "Como um servidor 'lembra' de você entre diferentes requisições, se o protocolo em si não tem memória?", "answerOptions": [ { "text": "Pequenos arquivos de log armazenados apenas no servidor.", "rationale": "Cookies são armazenados no navegador do cliente, não no servidor.", "isCorrect": false }, { "text": "Pequenos pedaços de dados que o servidor envia para o navegador do usuário, que os armazena e os envia de volta a cada requisição.", "rationale": "Isso permite que o servidor mantenha o estado e 'lembre' informações como status de login ou itens em um carrinho de compras.", "isCorrect": true }, { "text": "Scripts maliciosos que tentam roubar informações do usuário.", "rationale": "Embora possam ser usados para rastreamento, os cookies em si são um mecanismo padrão e legítimo do protocolo HTTP.", "isCorrect": false }, { "text": "Um tipo especial de cache do navegador que armazena imagens e CSS.", "rationale": "O cache de ativos é um mecanismo separado dos cookies, que são usados para armazenar dados de estado.", "isCorrect": false } ] },
    { "question": "Qual a principal diferença entre os bancos de dados SQL (Relacionais) e NoSQL?", "hint": "Pense na rigidez da estrutura dos dados. Um é como uma planilha com colunas fixas, o outro é como uma pasta com documentos de formatos variados.", "answerOptions": [ { "text": "Bancos SQL são mais lentos, enquanto bancos NoSQL são sempre mais rápidos.", "rationale": "A performance depende muito do caso de uso; nenhum é universalmente mais rápido que o outro.", "isCorrect": false }, { "text": "Bancos SQL usam um esquema rígido e predefinido (tabelas e colunas), enquanto bancos NoSQL são geralmente sem esquema ou têm um esquema flexível.", "rationale": "Essa flexibilidade torna os bancos NoSQL adequados para dados não estruturados ou em rápida evolução.", "isCorrect": true }, { "text": "Bancos SQL não podem ser escalados horizontalmente.", "rationale": "Embora a escalabilidade horizontal seja uma característica marcante de muitos bancos NoSQL, os bancos SQL também podem ser escalados, embora muitas vezes com mais complexidade.", "isCorrect": false }, { "text": "Apenas bancos NoSQL podem ser usados em aplicações web.", "rationale": "Bancos SQL, como PostgreSQL e MySQL, são extremamente populares e amplamente utilizados em aplicações web de todos os tamanhos.", "isCorrect": false } ] },
    { "question": "O que é um 'token JWT' (JSON Web Token)?", "hint": "É como um crachá digital que um usuário carrega para provar quem ele é e o que pode fazer, sem que o servidor precise consultá-lo a cada vez.", "answerOptions": [ { "text": "Uma sessão armazenada inteiramente no banco de dados do servidor.", "rationale": "Uma das vantagens do JWT é que ele é 'stateless', o token em si contém as informações, reduzindo a necessidade de consultas ao banco.", "isCorrect": false }, { "text": "Um padrão compacto e autossuficiente para transmitir informações entre partes como um objeto JSON, que pode ser verificado e confiado.", "rationale": "Ele é frequentemente usado para autenticação e autorização, pois pode ser assinado digitalmente para garantir sua integridade.", "isCorrect": true }, { "text": "Um tipo especial de cookie que só pode ser lido pelo servidor.", "rationale": "Embora um JWT possa ser armazenado em um cookie, o token em si é um padrão de dados, não um tipo de cookie.", "isCorrect": false }, { "text": "Um método de criptografia de senhas para armazenamento seguro.", "rationale": "JWTs são para representar 'claims' (afirmações) de forma segura, não para fazer hashing de senhas. Para isso, usa-se bcrypt.", "isCorrect": false } ] },
    { "question": "O que é 'linting' no processo de desenvolvimento de software?", "hint": "Pense em um revisor de texto automático para o seu código, que aponta erros de estilo e potenciais problemas.", "answerOptions": [ { "text": "O processo de compilar o código de uma linguagem para outra.", "rationale": "Isso é chamado de transpilação (ex: TypeScript para JavaScript).", "isCorrect": false }, { "text": "A análise estática do código-fonte para encontrar erros de programação, bugs, erros de estilo e construções suspeitas.", "rationale": "Ferramentas como o ESLint ajudam a manter a qualidade e a consistência do código em uma equipe.", "isCorrect": true }, { "text": "A execução de testes de unidade para verificar a lógica do código.", "rationale": "Isso é 'unit testing', uma prática diferente, embora ambas contribuam para a qualidade do código.", "isCorrect": false }, { "text": "O processo de otimizar o código para que ele rode mais rápido em produção.", "rationale": "Isso é otimização ou 'minification', geralmente uma etapa do processo de build.", "isCorrect": false } ] },
    { "question": "Qual a diferença entre `null` e `undefined` em JavaScript?", "hint": "Um representa a ausência intencional de um valor, enquanto o outro representa um valor que ainda não foi atribuído.", "answerOptions": [ { "text": "São exatamente a mesma coisa e podem ser usados de forma intercambiável.", "rationale": "Embora ambos representem a ausência de valor, eles têm significados semânticos diferentes e são tipos distintos.", "isCorrect": false }, { "text": "`null` é um valor atribuído intencionalmente para representar 'nenhum valor', enquanto `undefined` significa que uma variável foi declarada, mas não inicializada.", "rationale": "`null` é um objeto (um bug histórico da linguagem) e `undefined` é do tipo `undefined`. `null` é uma atribuição explícita.", "isCorrect": true }, { "text": "`null` representa um erro no código, enquanto `undefined` é um valor válido.", "rationale": "Ambos são valores primitivos válidos em JavaScript e não representam erros por si só.", "isCorrect": false }, { "text": "Apenas `null` pode ser retornado por uma função.", "rationale": "Uma função que não tem uma declaração `return` explícita retorna `undefined` por padrão.", "isCorrect": false } ] },
    { "question": "O que o método `Array.prototype.map()` faz em JavaScript?", "hint": "Ele cria um novo array transformando cada elemento do array original.", "answerOptions": [ { "text": "Modifica o array original, alterando cada um de seus elementos.", "rationale": "O método `map()` é imutável; ele não altera o array original.", "isCorrect": false }, { "text": "Cria um novo array com os resultados da chamada de uma função para cada elemento do array original.", "rationale": "É uma forma declarativa e poderosa de transformar dados, por exemplo, extraindo uma propriedade de cada objeto em um array.", "isCorrect": true }, { "text": "Filtra os elementos do array, retornando um novo array apenas com os elementos que passam em um teste.", "rationale": "Essa é a descrição do método `filter()`, não do `map()`.", "isCorrect": false }, { "text": "Executa uma função para cada elemento do array, mas não retorna nada.", "rationale": "Essa é a descrição do método `forEach()`.", "isCorrect": false } ] },
    { "question": "O que é o 'Box Model' em CSS?", "hint": "É o conceito fundamental que descreve como cada elemento HTML é representado como uma caixa retangular na página.", "answerOptions": [ { "text": "Um modelo para criar caixas de seleção (checkboxes) estilizadas.", "rationale": "O Box Model é um conceito de layout muito mais fundamental e se aplica a todos os elementos.", "isCorrect": false }, { "text": "O conceito de que cada elemento HTML é uma caixa composta por conteúdo, preenchimento (padding), borda (border) e margem (margin).", "rationale": "Entender como essas quatro partes interagem é crucial para o controle de layout e espaçamento em CSS.", "isCorrect": true }, { "text": "Uma biblioteca CSS para criar layouts em grade, como o Flexbox.", "rationale": "Flexbox e Grid são sistemas de layout, enquanto o Box Model é o princípio sobre o qual esses sistemas operam em cada elemento.", "isCorrect": false }, { "text": "Uma ferramenta de design para desenhar a estrutura de uma página web antes de codificar.", "rationale": "Isso seria uma ferramenta de wireframing ou prototipagem, não um conceito de CSS.", "isCorrect": false } ] },
    { "question": "O que é 'Semantic HTML'?", "hint": "Pense em usar tags que descrevem o significado do conteúdo, não apenas sua aparência.", "answerOptions": [ { "text": "Usar apenas tags `<div>` e `<span>` para estruturar a página.", "rationale": "Isso seria o oposto do HTML semântico, pois `div` e `span` não carregam significado sobre o conteúdo.", "isCorrect": false }, { "text": "Usar elementos HTML que descrevem o significado do seu conteúdo tanto para o navegador quanto para o desenvolvedor.", "rationale": "Tags como `<article>`, `<nav>`, `<header>` e `<footer>` dão contexto ao conteúdo, melhorando a acessibilidade e o SEO.", "isCorrect": true }, { "text": "Uma técnica para escrever HTML usando uma sintaxe similar à do JavaScript.", "rationale": "Isso se aproxima da descrição do JSX, usado em React, que não é o mesmo que HTML semântico.", "isCorrect": false }, { "text": "Escrever todo o código HTML em uma única linha para otimizar o carregamento.", "rationale": "A minificação de HTML otimiza o tamanho do arquivo, mas não tem relação com a semântica das tags usadas.", "isCorrect": false } ] },
    { "question": "Qual é a principal função de uma 'database migration'?", "hint": "Como você garante que a estrutura do banco de dados de todos os desenvolvedores e do servidor de produção esteja sempre sincronizada de forma controlada?", "answerOptions": [ { "text": "Transferir dados de um banco de dados para outro de um provedor diferente.", "rationale": "Embora isso seja um tipo de migração de dados, no desenvolvimento de software o termo geralmente se refere a outra coisa.", "isCorrect": false }, { "text": "Gerenciar e versionar alterações no esquema do banco de dados de forma programática.", "rationale": "As migrações permitem que as alterações na estrutura das tabelas sejam tratadas como código, garantindo consistência em diferentes ambientes.", "isCorrect": true }, { "text": "Criar um backup completo do banco de dados em um horário agendado.", "rationale": "Isso é um 'database backup' ou 'dump', um processo diferente das migrações de esquema.", "isCorrect": false }, { "text": "Otimizar as queries existentes no banco de dados para melhorar a performance.", "rationale": "A otimização de queries é uma tarefa de manutenção, enquanto as migrações lidam com a evolução da estrutura.", "isCorrect": false } ] },
    { "question": "Qual é o propósito de um 'salting' ao fazer o hash de senhas?", "hint": "O que aconteceria se dois usuários tivessem a mesma senha e você não usasse um 'salt'?", "answerOptions": [ { "text": "Adicionar um sabor extra à senha para torná-la mais memorável.", "rationale": "O termo 'salt' é uma metáfora, não tem relação com o sabor.", "isCorrect": false }, { "text": "Adicionar dados aleatórios únicos a cada senha antes de fazer o hash, para que senhas idênticas resultem em hashes diferentes.", "rationale": "Isso impede ataques de 'rainbow table' e garante que não seja óbvio quando dois usuários têm a mesma senha.", "isCorrect": true }, { "text": "Criptografar o hash da senha uma segunda vez.", "rationale": "Salting é sobre adicionar aleatoriedade à entrada do hash, não sobre aplicar o hash múltiplas vezes (embora isso também possa fazer parte de algoritmos robustos).", "isCorrect": false }, { "text": "Converter a senha para um formato diferente antes de aplicar o hash, como Base64.", "rationale": "A codificação não adiciona a aleatoriedade necessária que o salting fornece para a segurança.", "isCorrect": false } ] },
    { "question": "O que é 'responsive web design'?", "hint": "Como um site consegue ter uma boa aparência e ser fácil de usar tanto em um monitor grande quanto na tela de um celular?", "answerOptions": [ { "text": "Um design que responde rapidamente aos cliques do usuário.", "rationale": "A responsividade de performance é importante, mas o termo 'responsive design' se refere ao layout visual.", "isCorrect": false }, { "text": "Uma abordagem de design que faz com que o layout de um site se adapte ao tamanho da tela e à orientação do dispositivo.", "rationale": "Isso é geralmente alcançado com 'media queries', layouts fluidos em grade e imagens flexíveis.", "isCorrect": true }, { "text": "Um design que usa apenas imagens responsivas no formato SVG.", "rationale": "O design responsivo é um conceito de layout geral e não se limita a um formato de imagem específico.", "isCorrect": false }, { "text": "Um design que responde ao usuário com mensagens de voz.", "rationale": "Isso seria uma interface de voz, uma tecnologia diferente do design responsivo.", "isCorrect": false } ] },
    { "question": "Qual é a finalidade do 'Event Loop' em Node.js?", "hint": "Como o Node.js consegue lidar com muitas conexões simultâneas sem travar, mesmo sendo 'single-threaded'?", "answerOptions": [ { "text": "É um loop `for` infinito que executa todo o código da aplicação repetidamente.", "rationale": "O Event Loop é um mecanismo mais sofisticado que gerencia a execução de código, não apenas o repete.", "isCorrect": false }, { "text": "Ele permite que Node.js execute operações de I/O (entrada/saída) de forma não-bloqueante, colocando-as em uma fila e processando seus callbacks quando são concluídas.", "rationale": "Isso libera a thread principal para lidar com outras requisições enquanto as operações lentas (como ler um arquivo ou acessar o banco) acontecem em segundo plano.", "isCorrect": true }, { "text": "É um recurso de segurança que inspeciona todos os eventos em busca de código malicioso.", "rationale": "Sua função é gerenciar o fluxo de execução, não a segurança.", "isCorrect": false }, { "text": "É uma ferramenta para criar múltiplos 'threads' para executar código em paralelo.", "rationale": "Node.js opera em uma única thread principal; o Event Loop é o mecanismo que permite a concorrência dentro dessa única thread.", "isCorrect": false } ] },
    { "question": "O que é 'destructuring assignment' em JavaScript (ES6)?", "hint": "É uma forma concisa de extrair valores de estruturas de dados.", "answerOptions": [ { "text": "Um método para deletar propriedades de um objeto.", "rationale": "Para deletar propriedades, usa-se o operador `delete`.", "isCorrect": false }, { "text": "Uma sintaxe que permite desempacotar valores de arrays ou propriedades de objetos em variáveis distintas.", "rationale": "Por exemplo, `const [a, b] = [1, 2];` ou `const { nome, idade } = { nome: 'Ana', idade: 30 };`.", "isCorrect": true }, { "text": "Uma forma de reestruturar a herança de protótipos em JavaScript.", "rationale": "A herança de protótipos é um conceito diferente e mais complexo do que a atribuição por desestruturação.", "isCorrect": false }, { "text": "Uma operação para combinar dois arrays ou objetos em um só.", "rationale": "Para combinar, geralmente se usa o operador 'spread' (`...`) ou métodos como `concat()`.", "isCorrect": false } ] },
    { "question": "O que a propriedade `display: flex` faz em um contêiner CSS?", "hint": "Pense em como ela permite alinhar e distribuir facilmente os itens dentro dele.", "answerOptions": [ { "text": "Torna o contêiner e seus filhos invisíveis na página.", "rationale": "Para tornar algo invisível, usa-se `display: none` ou `visibility: hidden`.", "isCorrect": false }, { "text": "Ativa um modelo de layout (Flexbox) que permite alinhar e distribuir o espaço entre os itens de forma eficiente.", "rationale": "Isso simplifica a criação de muitos layouts, como centralização vertical e colunas de altura igual.", "isCorrect": true }, { "text": "Faz com que o texto dentro do contêiner seja exibido em negrito.", "rationale": "Para negrito, usa-se a propriedade `font-weight: bold;`.", "isCorrect": false }, { "text": "Exibe o contêiner como um elemento em nível de bloco, que é o padrão para `div`s.", "rationale": "Embora um contêiner flex se comporte como um bloco externamente, seu poder está em como ele arranja seus filhos internamente.", "isCorrect": false } ] },
    { "question": "Qual a finalidade de usar 'strict mode' (`'use strict';`) em JavaScript?", "hint": "É uma forma de optar por uma versão mais restrita e segura da linguagem, que proíbe certas ações.", "answerOptions": [ { "text": "Permite o uso de recursos experimentais do JavaScript.", "rationale": "O modo estrito não adiciona novos recursos, mas modifica a semântica de alguns existentes para torná-los mais seguros.", "isCorrect": false }, { "text": "Muda o JavaScript para um modo mais restrito, transformando 'erros silenciosos' em erros que são lançados.", "rationale": "Ele previne o uso de variáveis não declaradas, proíbe nomes de propriedade duplicados e torna o `eval()` mais seguro, entre outras coisas.", "isCorrect": true }, { "text": "Obriga o uso de TypeScript em vez de JavaScript puro.", "rationale": "O modo estrito é um recurso nativo do JavaScript e não tem relação com o TypeScript.", "isCorrect": false }, { "text": "Aumenta drasticamente a performance do código JavaScript.", "rationale": "O objetivo principal é a robustez e a prevenção de erros, não a otimização de performance.", "isCorrect": false } ] },
    { "question": "O que é uma 'Promise' em JavaScript?", "hint": "É um objeto que representa o resultado eventual (sucesso ou falha) de uma operação que leva tempo para ser concluída.", "answerOptions": [ { "text": "Uma garantia de que uma função será executada em menos de 1 segundo.", "rationale": "Uma 'Promise' não oferece garantias de tempo; ela gerencia o resultado de uma operação, não importa quanto tempo leve.", "isCorrect": false }, { "text": "Um objeto que representa a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante.", "rationale": "Ela permite que você associe 'handlers' (manipuladores) ao resultado de uma ação assíncrona, usando `.then()` para sucesso e `.catch()` para falha.", "isCorrect": true }, { "text": "Uma função que é executada imediatamente quando é declarada.", "rationale": "Isso descreve uma IIFE (Immediately Invoked Function Expression), um padrão diferente.", "isCorrect": false }, { "text": "Uma sintaxe alternativa para criar loops `for`.", "rationale": "'Promises' são para lidar com assincronismo, não para iteração.", "isCorrect": false } ] }
  ]
};

const QUIZ_LENGTH = 10;

// Helper para embaralhar arrays
const shuffleArray = (array) => {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
};

// Componente da Tela Inicial
const StartScreen = ({ onStart }) => (
    <div className="bg-white p-8 rounded-xl shadow-lg text-center fade-in">
        <h1 className="text-3xl font-bold text-amber-900 mb-2">Quiz: Desenvolvedor Full Stack</h1>
        <p className="text-stone-600 mb-6">Teste seus conhecimentos sobre os principais conceitos do desenvolvimento de software, do Git ao DevOps. Selecionamos 10 perguntas aleatórias de um banco de 50 para desafiar você. Boa sorte!</p>
        <button onClick={onStart} className="w-full bg-amber-500 hover:bg-amber-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition-colors">Começar o Quiz</button>
    </div>
);

// Componente da Tela de Resultados
const ResultScreen = ({ score, totalQuestions, onRestart }) => {
    const percentage = (score / totalQuestions) * 100;
    let message = '';
    if (percentage === 100) {
        message = 'Excelente! Você acertou tudo. Um verdadeiro mestre do desenvolvimento!';
    } else if (percentage >= 70) {
        message = 'Muito bem! Você tem um ótimo conhecimento sobre os tópicos.';
    } else if (percentage >= 40) {
        message = 'Bom esforço! Continue estudando os tópicos para aprimorar seus conhecimentos.';
    } else {
        message = 'Não desanime! Use este quiz como um guia para saber onde focar seus estudos.';
    }

    return (
        <div className="text-center bg-white p-8 rounded-xl shadow-lg fade-in">
            <h2 className="text-3xl font-bold text-amber-900 mb-2">Quiz Concluído!</h2>
            <p className="text-stone-600 text-lg mb-4">Sua pontuação final é:</p>
            <div className="text-6xl font-bold text-amber-500 mb-6">{score} / {totalQuestions}</div>
            <p className="text-stone-700 font-medium mb-8">{message}</p>
            <button onClick={onRestart} className="w-full bg-amber-500 hover:bg-amber-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition-colors">Tentar Novamente</button>
        </div>
    );
};

// Componente da Tela do Quiz
const QuizScreen = ({ onFinish }) => {
    const [questions, setQuestions] = useState([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [score, setScore] = useState(0);
    const [selectedAnswer, setSelectedAnswer] = useState(null);
    const [showHint, setShowHint] = useState(false);
    
    useEffect(() => {
        const shuffled = shuffleArray(fullQuizData.questions);
        setQuestions(shuffled.slice(0, QUIZ_LENGTH));
    }, []);

    const currentQuestion = questions[currentIndex];
    const shuffledOptions = useMemo(() => {
        if (!currentQuestion) return [];
        return shuffleArray(currentQuestion.answerOptions);
    }, [currentQuestion]);


    const handleSelectAnswer = (option) => {
        if (selectedAnswer) return;

        setSelectedAnswer(option);
        setShowHint(false);

        if (option.isCorrect) {
            setScore(prevScore => prevScore + 1);
        }
    };

    const handleNextQuestion = () => {
        if (currentIndex < QUIZ_LENGTH - 1) {
            setCurrentIndex(prevIndex => prevIndex + 1);
            setSelectedAnswer(null);
            setShowHint(false);
        } else {
            onFinish(score);
        }
    };

    if (!currentQuestion) {
        return <div>Carregando...</div>;
    }

    return (
        <div className="fade-in">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-bold text-amber-800">Questão {currentIndex + 1} de {QUIZ_LENGTH}</h2>
                <div className="text-lg font-semibold">Pontuação: {score}</div>
            </div>

            <div className="bg-white p-6 sm:p-8 rounded-xl shadow-lg border border-stone-200">
                <p className="text-xl font-medium mb-6 min-h-[6rem]">{currentQuestion.question}</p>
                <div className="grid grid-cols-1 gap-4">
                    {shuffledOptions.map((option, index) => {
                        const isSelected = selectedAnswer && selectedAnswer.text === option.text;
                        const isCorrect = option.isCorrect;
                        
                        let buttonClass = 'option-btn w-full p-4 border-2 border-stone-300 rounded-lg text-left';
                        if (selectedAnswer) {
                             if (isCorrect) {
                                buttonClass += ' correct-answer';
                            } else if (isSelected && !isCorrect) {
                                buttonClass += ' incorrect-answer';
                            }
                        } else {
                            buttonClass += ' hover:bg-amber-50 hover:border-amber-400';
                        }
                        
                        return (
                            <button
                                key={index}
                                onClick={() => handleSelectAnswer(option)}
                                disabled={!!selectedAnswer}
                                className={buttonClass}
                            >
                                {option.text}
                            </button>
                        );
                    })}
                </div>

                <div className="mt-6 min-h-[6rem]">
                    {!selectedAnswer && (
                        <div className="text-center">
                            {!showHint ? (
                                <button onClick={() => setShowHint(true)} className="text-sm text-blue-600 hover:underline">
                                    Precisa de uma dica?
                                </button>
                            ) : (
                                <p className="mt-2 p-3 bg-blue-50 text-blue-800 rounded-lg text-sm fade-in">
                                    {currentQuestion.hint}
                                </p>
                            )}
                        </div>
                    )}

                    {selectedAnswer && (
                        <div className="p-4 bg-stone-100 border-l-4 border-stone-400 rounded-r-lg fade-in">
                            <p className="text-sm text-stone-700">{selectedAnswer.rationale}</p>
                        </div>
                    )}
                </div>

                <button
                    onClick={handleNextQuestion}
                    disabled={!selectedAnswer}
                    className="w-full mt-6 bg-amber-500 hover:bg-amber-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition-colors disabled:bg-stone-300"
                >
                    {currentIndex === QUIZ_LENGTH - 1 ? 'Ver Resultado Final' : 'Próxima Questão'}
                </button>
            </div>
        </div>
    );
};


// Componente Principal
export default function App() {
    const [gameState, setGameState] = useState('start'); // 'start', 'quiz', 'result'
    const [finalScore, setFinalScore] = useState(0);

    const handleStart = () => {
        setGameState('quiz');
    };
    
    const handleFinish = (score) => {
        setFinalScore(score);
        setGameState('result');
    };

    const handleRestart = () => {
        setFinalScore(0);
        setGameState('start');
    };

    return (
        <div className="w-full max-w-2xl mx-auto">
            {gameState === 'start' && <StartScreen onStart={handleStart} />}
            {gameState === 'quiz' && <QuizScreen onFinish={handleFinish} />}
            {gameState === 'result' && <ResultScreen score={finalScore} totalQuestions={QUIZ_LENGTH} onRestart={handleRestart} />}
        </div>
    );
}
